# Basic Git Use (do every time you edit): #
`git pull origin master`    #Download latest changes.  Run this every time you start.

`git add <filename>`        #Adds a filename
`git add <filename2>`       #Adds another filename, etc.

`git status`                #Tells you which files have been changed and/or added.

`git diff --cached`         #Displays diff between current state and last commit.

`git commit -m "<Insert a short message about what you did here.>"  #Saves added changes locally.
`git push -u origin master` #Uploads changes to respository.

Other Useful Git Commands:
`git log --oneline`     #Displays summary of each commit.
`git log -<n>`          #Displays last n commit details.
`git log --after="<yyyy-mm-dd>"`


# Advanced Git Use #

## Branches ##

`git branch -a`                   #Lists all branches
`git checkout -b <branch name>`   #Makes new branch

Switch back and forth with:
`git checkout master` or `git checkout develop`

To push the develop:
`git push origin develop`

merge code:
`git checkout master`             #Switch to master branch
`git pull origin master`          #Make sure master brach is up-to-date.
`git branch`                      #Verify on master branch
`git merge develop --no-ff`       #Merge while preserving commit history
`git push --all` 

To create a new branch so you can make commits based on an older version (again, make sure you've committed any changes), run

    git checkout -b <branch_name> <hex_number>

Here are useful links about branches:
http://nvie.com/posts/a-successful-git-branching-model/
https://www.digitalocean.com/community/tutorials/how-to-use-git-branches

## Tags ##
`git tag`                       #Lists all tags
`git tag -l '<search string>'`  #Lists tags which match
`git show <tag name>`           #Tells you information about the tag
`git tag <tag name>`            #Creates a lightweight tag (just keeps the commit)
`git tag -a <tag name> -m '<tag comment>'`  #Creates an annotated tag
`git tag -a <tag name> <commit hex>`        #Retroactively tags

tags are not pushed by default; either:
`git push origin <tag name>`
`git push origin --tags`       #If you have lots of tags


## Conflicts ##

If there's a conflict, run `git status` to see which files are in direct conflict.  Edit each of the sections in each file surrounded by:

   <<<<<<<
   code1
   =======
   code2
   >>>>>>>

(or similar) so that only the code you want is left (making sure to delete all the <=>s), then run `git add <filename>` for each, and commit like normal.

Or, you might need to run the following separately:

   git fetch origin master
   git merge
